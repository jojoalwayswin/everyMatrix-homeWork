package controller;import domain.BetOffer;import domain.Stake;import exception.BusinessException;import http.annotation.*;import manager.SessionManager;import utils.SessionLRUCache;import utils.StakeSkipList;import java.util.concurrent.ConcurrentHashMap;import java.util.stream.Collectors;/** * @author zhangshu * @ClassName SessionController * @description: SessionController * @date 2025年04月30日 * @version: 1.0 */@Controllerpublic class HomeWorkController {    @GetMapping("/{customerid}/session")    public String getSessionKey(@RequestParam("customerid") int customerid) {        return  SessionLRUCache.getInstance().getSessionKey(customerid);    }    @PostMapping("/{betofferid}/stake")    public void stakeOnBetOffer(@RequestParam("betofferid") int betofferid,@RequestParam("sessionkey") String sessionKey,@RequestBody int stake) throws BusinessException {            Integer customerId = SessionLRUCache.getInstance().invalidateSession(sessionKey);            if (customerId == null) {                throw  new BusinessException("已过期，请重新登录");            }            // 获取或创建投注单            BetOffer betOffer = Stake.stakeMap.get(betofferid);            if (betOffer == null) {                betOffer = new BetOffer();                betOffer.putStake(customerId, stake);                Stake.stakeMap.put(betofferid, betOffer);            }else {                // 更新客户最高投注                betOffer.putStake(customerId, stake);            }    }    @GetMapping("/{betofferid}/highstakes")    public String getHighStakes(@RequestParam("betofferid") int betofferid) throws BusinessException {        BetOffer betOffer = Stake.stakeMap.get(betofferid);        if (betOffer == null) return ""; // 无数据返回空字符串        StakeSkipList.Node[] top20 = betOffer.getTop20();        if (top20.length == 0) return "";// 无数据返回空字符串        StringBuilder sb = new StringBuilder();        for (StakeSkipList.Node node : top20){            sb.append(node.getKey()).append(":").append(node.getValue()).append(",");        }        return sb.deleteCharAt(sb.length() - 1).toString();    }}